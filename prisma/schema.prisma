generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model InteractiveChat_USER_PERFERENCES {
  UUID               String?  @db.Text
  NAME               String?  @db.Text
  DISABLED_MENTION   Boolean?
  INV_DISPLAY_LAYOUT Int?

  @@ignore
}

model SkillData {
  ID               String  @id @db.VarChar(40)
  AGILITY_LEVEL    Int?
  AGILITY_XP       Float?
  ALCHEMY_LEVEL    Int?
  ALCHEMY_XP       Float?
  ARCHERY_LEVEL    Int?
  ARCHERY_XP       Float?
  DEFENSE_LEVEL    Int?
  DEFENSE_XP       Float?
  ENCHANTING_LEVEL Int?
  ENCHANTING_XP    Float?
  ENDURANCE_LEVEL  Int?
  ENDURANCE_XP     Float?
  EXCAVATION_LEVEL Int?
  EXCAVATION_XP    Float?
  FARMING_LEVEL    Int?
  FARMING_XP       Float?
  FIGHTING_LEVEL   Int?
  FIGHTING_XP      Float?
  FISHING_LEVEL    Int?
  FISHING_XP       Float?
  FORAGING_LEVEL   Int?
  FORAGING_XP      Float?
  FORGING_LEVEL    Int?
  FORGING_XP       Float?
  HEALING_LEVEL    Int?
  HEALING_XP       Float?
  MINING_LEVEL     Int?
  MINING_XP        Float?
  SORCERY_LEVEL    Int?
  SORCERY_XP       Float?
  LOCALE           String? @db.VarChar(10)
  STAT_MODIFIERS   String? @db.VarChar(4096)
  MANA             Float?
  ABILITY_DATA     String? @db.VarChar(4096)
  UNCLAIMED_ITEMS  String? @db.VarChar(4096)
}

model VentureChat {
  ID       BigInt  @id @unique(map: "ID") @default(autoincrement()) @db.UnsignedBigInt
  ChatTime String? @db.Text
  UUID     String? @db.Text
  Name     String? @db.Text
  Server   String? @db.Text
  Channel  String? @db.Text
  Text     String? @db.Text
  Type     String? @db.Text
}

model eco_data {
  id        Bytes  @id @db.Binary(16)
  json_data String @db.LongText
}

model excellentchallenges_users {
  id                  Int    @id @default(autoincrement())
  uuid                String @db.MediumText
  name                String @db.MediumText
  dateCreated         BigInt
  last_online         BigInt
  challenges          String @db.MediumText
  refreshTimes        String @db.MediumText
  rerollTokens        String @db.MediumText
  completedChallenges String @db.MediumText
}

model jobs_archive {
  id         Int     @id @default(autoincrement())
  userid     Int?
  job        String? @db.Text
  experience Int?
  level      Int?
  left       BigInt?
  jobid      Int?
}

model jobs_blocks {
  id       Int     @id @default(autoincrement())
  world    String? @db.VarChar(36)
  x        Int?
  y        Int?
  z        Int?
  recorded BigInt?
  resets   BigInt?
  worldid  Int?
}

model jobs_exploreData {
  id          Int     @id @default(autoincrement())
  worldname   String? @db.VarChar(64)
  chunkX      Int?
  chunkZ      Int?
  playerNames String? @db.Text
  worldid     Int?
}

model jobs_jobNames {
  id   Int     @id @default(autoincrement())
  name String? @unique(map: "template_jobNames") @db.VarChar(36)
}

model jobs_jobs {
  id         Int     @id @default(autoincrement())
  userid     Int?
  job        String? @db.Text
  experience Float?
  level      Int?
  jobid      Int?
}

model jobs_limits {
  id        Int     @id @default(autoincrement())
  userid    Int?
  type      String? @db.VarChar(36)
  collected Float?
  started   BigInt?
  typeid    Int?
}

model jobs_log {
  id       Int     @id @default(autoincrement())
  userid   Int?
  time     BigInt?
  action   String? @db.VarChar(20)
  itemname String? @db.Text
  count    Int?
  money    Float?
  exp      Float?
  points   Float?
}

model jobs_points {
  id            Int    @id @default(autoincrement())
  userid        Int?
  totalpoints   Float?
  currentpoints Float?
}

model jobs_users {
  id          Int     @id @default(autoincrement())
  player_uuid String? @db.VarChar(36)
  username    String? @db.Text
  seen        BigInt?
  donequests  Int?
  quests      String? @db.Text
}

model jobs_worlds {
  id   Int     @id @default(autoincrement())
  name String? @unique(map: "template_worlds") @db.VarChar(36)
}

model luckperms_actions {
  id         Int    @id @default(autoincrement())
  time       BigInt
  actor_uuid String @db.VarChar(36)
  actor_name String @db.VarChar(100)
  type       String @db.Char(1)
  acted_uuid String @db.VarChar(36)
  acted_name String @db.VarChar(36)
  action     String @db.VarChar(300)
}

model luckperms_group_permissions {
  id         Int     @id @default(autoincrement())
  name       String  @db.VarChar(36)
  permission String  @db.VarChar(200)
  value      Boolean
  server     String  @db.VarChar(36)
  world      String  @db.VarChar(64)
  expiry     BigInt
  contexts   String  @db.VarChar(200)

  @@index([name], map: "luckperms_group_permissions_name")
}

model luckperms_groups {
  name String @id @db.VarChar(36)
}

model luckperms_messenger {
  id   Int      @id @default(autoincrement())
  time DateTime @default(now()) @db.Timestamp(0)
  msg  String   @db.Text
}

model luckperms_players {
  uuid          String @id @db.VarChar(36)
  username      String @db.VarChar(16)
  primary_group String @db.VarChar(36)

  @@index([username], map: "luckperms_players_username")
}

model luckperms_tracks {
  name   String @id @db.VarChar(36)
  groups String @db.Text
}

model luckperms_user_permissions {
  id         Int     @id @default(autoincrement())
  uuid       String  @db.VarChar(36)
  permission String  @db.VarChar(200)
  value      Boolean
  server     String  @db.VarChar(36)
  world      String  @db.VarChar(64)
  expiry     BigInt
  contexts   String  @db.VarChar(200)

  @@index([uuid], map: "luckperms_user_permissions_uuid")
}

model migrations {
  id      BigInt @id @default(autoincrement())
  version Int
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model pets_info {
  version       Int?     @unique(map: "version")
  mypet_version String?  @db.VarChar(20)
  mypet_build   String?  @db.VarChar(20)
  last_update   DateTime @default(now()) @db.Timestamp(0)

  @@ignore
}

model pets_pets {
  uuid           String   @id @unique(map: "uuid") @db.VarChar(36)
  owner_uuid     String   @db.VarChar(36)
  exp            Float?
  health         Float?
  respawn_time   Int?
  name           Bytes?   @db.VarBinary(1024)
  type           String?  @db.VarChar(20)
  last_used      BigInt?
  hunger         Int?
  world_group    String?  @db.VarChar(255)
  wants_to_spawn Boolean?
  skilltree      String?  @db.VarChar(255)
  skills         Bytes?   @db.Blob
  info           Bytes?   @db.Blob
  last_update    DateTime @default(now()) @db.Timestamp(0)

  @@index([owner_uuid], map: "owner_uuid")
}

model pets_players {
  internal_uuid    String   @id @unique(map: "internal_uuid") @db.VarChar(36)
  mojang_uuid      String?  @unique(map: "mojang_uuid") @db.VarChar(36)
  name             String?  @unique(map: "name") @db.VarChar(16)
  auto_respawn     Boolean?
  auto_respawn_min Int?
  capture_mode     Boolean?
  health_bar       Int?
  pet_idle_volume  Float?   @db.Float
  extended_info    Bytes?   @db.Blob
  multi_world      String?  @db.VarChar(2000)
  last_update      DateTime @default(now()) @db.Timestamp(0)
}

model plan_access_log {
  id             Int     @id @default(autoincrement())
  time           BigInt
  from_ip        String? @db.VarChar(45)
  request_method String  @db.VarChar(8)
  request_uri    String  @db.Text
  response_code  Int?
}

model plan_cookies {
  id           Int    @id @default(autoincrement())
  web_username String @db.VarChar(100)
  expires      BigInt
  cookie       String @db.VarChar(64)
}

model plan_extension_groups {
  id                       Int                      @id @default(autoincrement())
  uuid                     String                   @db.VarChar(36)
  group_name               String?                  @db.VarChar(50)
  provider_id              Int
  plan_extension_providers plan_extension_providers @relation(fields: [provider_id], references: [id], onUpdate: Restrict, map: "plan_extension_groups_ibfk_1")

  @@index([provider_id], map: "provider_id")
}

model plan_extension_icons {
  id                                                                          Int                        @id @default(autoincrement())
  name                                                                        String                     @default("question") @db.VarChar(50)
  family                                                                      String                     @default("SOLID") @db.VarChar(15)
  color                                                                       String                     @default("NONE") @db.VarChar(25)
  plan_extension_plugins                                                      plan_extension_plugins[]
  plan_extension_providers                                                    plan_extension_providers[]
  plan_extension_tables_plan_extension_tables_icon_1_idToplan_extension_icons plan_extension_tables[]    @relation("plan_extension_tables_icon_1_idToplan_extension_icons")
  plan_extension_tables_plan_extension_tables_icon_2_idToplan_extension_icons plan_extension_tables[]    @relation("plan_extension_tables_icon_2_idToplan_extension_icons")
  plan_extension_tables_plan_extension_tables_icon_3_idToplan_extension_icons plan_extension_tables[]    @relation("plan_extension_tables_icon_3_idToplan_extension_icons")
  plan_extension_tables_plan_extension_tables_icon_4_idToplan_extension_icons plan_extension_tables[]    @relation("plan_extension_tables_icon_4_idToplan_extension_icons")
  plan_extension_tables_plan_extension_tables_icon_5_idToplan_extension_icons plan_extension_tables[]    @relation("plan_extension_tables_icon_5_idToplan_extension_icons")
  plan_extension_tabs                                                         plan_extension_tabs[]
}

model plan_extension_plugins {
  id                       Int                        @id @default(autoincrement())
  name                     String                     @db.VarChar(50)
  last_updated             BigInt
  server_uuid              String                     @db.VarChar(36)
  icon_id                  Int
  plan_extension_icons     plan_extension_icons       @relation(fields: [icon_id], references: [id], onUpdate: Restrict, map: "plan_extension_plugins_ibfk_1")
  plan_extension_providers plan_extension_providers[]
  plan_extension_tables    plan_extension_tables[]
  plan_extension_tabs      plan_extension_tabs[]

  @@index([icon_id], map: "icon_id")
}

model plan_extension_providers {
  id                           Int                            @id @default(autoincrement())
  name                         String                         @db.VarChar(50)
  text                         String                         @db.VarChar(50)
  description                  String?                        @db.VarChar(150)
  priority                     Int                            @default(0)
  show_in_players_table        Boolean                        @default(false)
  groupable                    Boolean                        @default(false)
  condition_name               String?                        @db.VarChar(54)
  provided_condition           String?                        @db.VarChar(50)
  format_type                  String?                        @db.VarChar(25)
  hidden                       Boolean                        @default(false)
  player_name                  Boolean                        @default(false)
  plugin_id                    Int
  icon_id                      Int
  tab_id                       Int?
  plan_extension_groups        plan_extension_groups[]
  plan_extension_plugins       plan_extension_plugins         @relation(fields: [plugin_id], references: [id], onUpdate: Restrict, map: "plan_extension_providers_ibfk_1")
  plan_extension_icons         plan_extension_icons           @relation(fields: [icon_id], references: [id], onUpdate: Restrict, map: "plan_extension_providers_ibfk_2")
  plan_extension_tabs          plan_extension_tabs?           @relation(fields: [tab_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "plan_extension_providers_ibfk_3")
  plan_extension_server_values plan_extension_server_values[]
  plan_extension_user_values   plan_extension_user_values[]

  @@index([icon_id], map: "icon_id")
  @@index([plugin_id], map: "plugin_id")
  @@index([tab_id], map: "tab_id")
}

model plan_extension_server_table_values {
  id                    Int                   @id @default(autoincrement())
  uuid                  String                @db.VarChar(36)
  table_row             Int                   @default(0)
  col_1_value           String?               @db.VarChar(250)
  col_2_value           String?               @db.VarChar(250)
  col_3_value           String?               @db.VarChar(250)
  col_4_value           String?               @db.VarChar(250)
  col_5_value           String?               @db.VarChar(250)
  table_id              Int
  plan_extension_tables plan_extension_tables @relation(fields: [table_id], references: [id], onUpdate: Restrict, map: "plan_extension_server_table_values_ibfk_1")

  @@index([table_id], map: "table_id")
}

model plan_extension_server_values {
  id                       Int                      @id @default(autoincrement())
  boolean_value            Boolean?
  double_value             Float?
  percentage_value         Float?
  long_value               BigInt?
  string_value             String?                  @db.VarChar(50)
  component_value          String?                  @db.VarChar(500)
  group_value              String?                  @db.VarChar(50)
  provider_id              Int
  plan_extension_providers plan_extension_providers @relation(fields: [provider_id], references: [id], onUpdate: Restrict, map: "plan_extension_server_values_ibfk_1")

  @@index([provider_id], map: "provider_id")
}

model plan_extension_tables {
  id                                                                         Int                                  @id @default(autoincrement())
  name                                                                       String                               @db.VarChar(50)
  color                                                                      String                               @default("NONE") @db.VarChar(25)
  values_for                                                                 Int?                                 @default(0)
  condition_name                                                             String?                              @db.VarChar(54)
  col_1_name                                                                 String?                              @db.VarChar(50)
  col_2_name                                                                 String?                              @db.VarChar(50)
  col_3_name                                                                 String?                              @db.VarChar(50)
  col_4_name                                                                 String?                              @db.VarChar(50)
  col_5_name                                                                 String?                              @db.VarChar(50)
  plugin_id                                                                  Int
  icon_1_id                                                                  Int?
  icon_2_id                                                                  Int?
  icon_3_id                                                                  Int?
  icon_4_id                                                                  Int?
  icon_5_id                                                                  Int?
  format_1                                                                   String?                              @db.VarChar(15)
  format_2                                                                   String?                              @db.VarChar(15)
  format_3                                                                   String?                              @db.VarChar(15)
  format_4                                                                   String?                              @db.VarChar(15)
  format_5                                                                   String?                              @db.VarChar(15)
  tab_id                                                                     Int?
  plan_extension_server_table_values                                         plan_extension_server_table_values[]
  plan_extension_plugins                                                     plan_extension_plugins               @relation(fields: [plugin_id], references: [id], onUpdate: Restrict, map: "plan_extension_tables_ibfk_1")
  plan_extension_icons_plan_extension_tables_icon_1_idToplan_extension_icons plan_extension_icons?                @relation("plan_extension_tables_icon_1_idToplan_extension_icons", fields: [icon_1_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "plan_extension_tables_ibfk_2")
  plan_extension_icons_plan_extension_tables_icon_2_idToplan_extension_icons plan_extension_icons?                @relation("plan_extension_tables_icon_2_idToplan_extension_icons", fields: [icon_2_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "plan_extension_tables_ibfk_3")
  plan_extension_icons_plan_extension_tables_icon_3_idToplan_extension_icons plan_extension_icons?                @relation("plan_extension_tables_icon_3_idToplan_extension_icons", fields: [icon_3_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "plan_extension_tables_ibfk_4")
  plan_extension_icons_plan_extension_tables_icon_4_idToplan_extension_icons plan_extension_icons?                @relation("plan_extension_tables_icon_4_idToplan_extension_icons", fields: [icon_4_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "plan_extension_tables_ibfk_5")
  plan_extension_icons_plan_extension_tables_icon_5_idToplan_extension_icons plan_extension_icons?                @relation("plan_extension_tables_icon_5_idToplan_extension_icons", fields: [icon_5_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "plan_extension_tables_ibfk_6")
  plan_extension_tabs                                                        plan_extension_tabs?                 @relation(fields: [tab_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "plan_extension_tables_ibfk_7")
  plan_extension_user_table_values                                           plan_extension_user_table_values[]

  @@index([icon_1_id], map: "icon_1_id")
  @@index([icon_2_id], map: "icon_2_id")
  @@index([icon_3_id], map: "icon_3_id")
  @@index([icon_4_id], map: "icon_4_id")
  @@index([icon_5_id], map: "icon_5_id")
  @@index([plugin_id], map: "plugin_id")
  @@index([tab_id], map: "tab_id")
}

model plan_extension_tabs {
  id                       Int                        @id @default(autoincrement())
  name                     String                     @db.VarChar(50)
  element_order            String                     @default("VALUES,GRAPH,TABLE") @db.VarChar(100)
  tab_priority             Int
  plugin_id                Int
  icon_id                  Int
  plan_extension_providers plan_extension_providers[]
  plan_extension_tables    plan_extension_tables[]
  plan_extension_plugins   plan_extension_plugins     @relation(fields: [plugin_id], references: [id], onUpdate: Restrict, map: "plan_extension_tabs_ibfk_1")
  plan_extension_icons     plan_extension_icons       @relation(fields: [icon_id], references: [id], onUpdate: Restrict, map: "plan_extension_tabs_ibfk_2")

  @@index([icon_id], map: "icon_id")
  @@index([plugin_id], map: "plugin_id")
}

model plan_extension_user_table_values {
  id                    Int                   @id @default(autoincrement())
  uuid                  String                @db.VarChar(36)
  table_row             Int                   @default(0)
  col_1_value           String?               @db.VarChar(250)
  col_2_value           String?               @db.VarChar(250)
  col_3_value           String?               @db.VarChar(250)
  col_4_value           String?               @db.VarChar(250)
  table_id              Int
  plan_extension_tables plan_extension_tables @relation(fields: [table_id], references: [id], onUpdate: Restrict, map: "plan_extension_user_table_values_ibfk_1")

  @@index([table_id], map: "table_id")
}

model plan_extension_user_values {
  id                       Int                      @id @default(autoincrement())
  boolean_value            Boolean?
  double_value             Float?
  percentage_value         Float?
  long_value               BigInt?
  string_value             String?                  @db.VarChar(50)
  component_value          String?                  @db.VarChar(500)
  group_value              String?                  @db.VarChar(50)
  uuid                     String                   @db.VarChar(36)
  provider_id              Int
  plan_extension_providers plan_extension_providers @relation(fields: [provider_id], references: [id], onUpdate: Restrict, map: "plan_extension_user_values_ibfk_1")

  @@index([provider_id], map: "provider_id")
}

model plan_geolocations {
  id          Int        @id @default(autoincrement())
  user_id     Int
  geolocation String     @db.VarChar(50)
  last_used   BigInt     @default(0)
  plan_users  plan_users @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "plan_geolocations_ibfk_1")

  @@index([user_id], map: "user_id")
}

model plan_join_address {
  id           Int     @id @default(autoincrement())
  join_address String? @unique(map: "join_address")
}

model plan_kills {
  id            Int           @id @default(autoincrement())
  killer_uuid   String        @db.VarChar(36)
  victim_uuid   String        @db.VarChar(36)
  server_uuid   String        @db.VarChar(36)
  weapon        String        @db.VarChar(30)
  date          BigInt
  session_id    Int
  plan_sessions plan_sessions @relation(fields: [session_id], references: [id], onUpdate: Restrict, map: "plan_kills_ibfk_1")

  @@index([date], map: "plan_kills_date_index")
  @@index([killer_uuid, victim_uuid, server_uuid], map: "plan_kills_uuid_index")
  @@index([session_id], map: "session_id")
}

model plan_nicknames {
  id          Int    @id @default(autoincrement())
  uuid        String @db.VarChar(36)
  nickname    String @db.VarChar(75)
  server_uuid String @db.VarChar(36)
  last_used   BigInt
}

model plan_ping {
  id           Int          @id @default(autoincrement())
  user_id      Int
  server_id    Int
  date         BigInt
  max_ping     Int
  min_ping     Int
  avg_ping     Float
  plan_users   plan_users   @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "plan_ping_ibfk_1")
  plan_servers plan_servers @relation(fields: [server_id], references: [id], onUpdate: Restrict, map: "plan_ping_ibfk_2")

  @@index([date], map: "plan_ping_date_index")
  @@index([server_id], map: "server_id")
  @@index([user_id], map: "user_id")
}

model plan_security {
  id               Int     @id @default(autoincrement())
  username         String  @unique(map: "username") @db.VarChar(100)
  linked_to_uuid   String? @default("") @db.VarChar(36)
  salted_pass_hash String  @unique(map: "salted_pass_hash") @db.VarChar(100)
  permission_level Int
}

model plan_servers {
  id               Int                @id @default(autoincrement())
  uuid             String             @unique(map: "uuid") @db.VarChar(36)
  name             String?            @db.VarChar(100)
  web_address      String?            @db.VarChar(100)
  is_installed     Boolean            @default(true)
  is_proxy         Boolean            @default(false)
  plan_version     String?            @db.VarChar(18)
  plan_ping        plan_ping[]
  plan_sessions    plan_sessions[]
  plan_tps         plan_tps[]
  plan_user_info   plan_user_info[]
  plan_world_times plan_world_times[]
}

model plan_sessions {
  id               Int                @id @default(autoincrement())
  user_id          Int
  server_id        Int
  session_start    BigInt
  session_end      BigInt
  mob_kills        Int
  deaths           Int
  afk_time         BigInt
  join_address_id  Int                @default(1)
  plan_kills       plan_kills[]
  plan_users       plan_users         @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "plan_sessions_ibfk_1")
  plan_servers     plan_servers       @relation(fields: [server_id], references: [id], onUpdate: Restrict, map: "plan_sessions_ibfk_2")
  plan_world_times plan_world_times[]

  @@index([join_address_id], map: "plan_session_join_address_index")
  @@index([session_start], map: "plan_sessions_date_index")
  @@index([server_id], map: "server_id")
  @@index([user_id], map: "user_id")
}

model plan_settings {
  id          Int    @id @default(autoincrement())
  server_uuid String @unique(map: "server_uuid") @db.VarChar(39)
  updated     BigInt
  content     String @db.Text
}

model plan_tps {
  id              Int          @id @default(autoincrement())
  server_id       Int
  date            BigInt
  tps             Float
  players_online  Int
  cpu_usage       Float
  ram_usage       BigInt
  entities        Int
  chunks_loaded   Int
  free_disk_space BigInt
  plan_servers    plan_servers @relation(fields: [server_id], references: [id], onUpdate: Restrict, map: "plan_tps_ibfk_1")

  @@index([date], map: "plan_tps_date_index")
  @@index([server_id], map: "server_id")
}

model plan_user_info {
  id           Int          @id @default(autoincrement())
  user_id      Int
  server_id    Int
  join_address String?
  registered   BigInt
  opped        Boolean      @default(false)
  banned       Boolean      @default(false)
  plan_users   plan_users   @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "plan_user_info_ibfk_1")
  plan_servers plan_servers @relation(fields: [server_id], references: [id], onUpdate: Restrict, map: "plan_user_info_ibfk_2")

  @@index([server_id], map: "server_id")
  @@index([user_id], map: "user_id")
}

model plan_users {
  id                Int                 @id @default(autoincrement())
  uuid              String              @unique(map: "uuid") @db.VarChar(36)
  registered        BigInt
  name              String              @db.VarChar(36)
  times_kicked      Int                 @default(0)
  plan_geolocations plan_geolocations[]
  plan_ping         plan_ping[]
  plan_sessions     plan_sessions[]
  plan_user_info    plan_user_info[]
  plan_world_times  plan_world_times[]

  @@index([uuid], map: "plan_users_uuid_index")
}

model plan_world_times {
  id             Int           @id @default(autoincrement())
  user_id        Int
  world_id       Int
  server_id      Int
  session_id     Int
  survival_time  BigInt        @default(0)
  creative_time  BigInt        @default(0)
  adventure_time BigInt        @default(0)
  spectator_time BigInt        @default(0)
  plan_worlds    plan_worlds   @relation(fields: [world_id], references: [id], onUpdate: Restrict, map: "plan_world_times_ibfk_1")
  plan_sessions  plan_sessions @relation(fields: [session_id], references: [id], onUpdate: Restrict, map: "plan_world_times_ibfk_2")
  plan_users     plan_users    @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "plan_world_times_ibfk_3")
  plan_servers   plan_servers  @relation(fields: [server_id], references: [id], onUpdate: Restrict, map: "plan_world_times_ibfk_4")

  @@index([server_id], map: "server_id")
  @@index([session_id], map: "session_id")
  @@index([user_id], map: "user_id")
  @@index([world_id], map: "world_id")
}

model plan_worlds {
  id               Int                @id @default(autoincrement())
  world_name       String             @db.VarChar(100)
  server_uuid      String             @db.VarChar(36)
  plan_world_times plan_world_times[]
}

model players {
  Nick String @id @db.VarChar(17)
  Skin String @db.VarChar(19)
}

model qs_external_cache {
  x     Int
  y     Int
  z     Int
  world String @db.VarChar(32)
  space Int?
  stock Int?

  @@id([x, y, z, world])
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model qs_logs {
  time      BigInt
  classname String? @db.Text
  data      String? @db.LongText

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model qs_messages {
  owner   String @db.VarChar(255)
  message String @db.Text
  time    BigInt

  @@ignore
}

model qs_shops {
  owner          String   @db.VarChar(255)
  price          Float
  itemConfig     String   @db.Text
  x              Int
  y              Int
  z              Int
  world          String   @db.VarChar(32)
  unlimited      Boolean?
  type           Boolean?
  extra          String?  @db.LongText
  currency       String?  @db.Text
  disableDisplay Int?
  taxAccount     String?  @db.VarChar(255)

  @@id([x, y, z, world])
}

model skins {
  Nick      String  @id @db.VarChar(19)
  Value     String? @db.Text
  Signature String? @db.Text
  timestamp String? @db.Text
}

model sr_players {
  Nick String @id @db.VarChar(17)
  Skin String @db.VarChar(19)
}

model sr_skins {
  Nick      String  @id @db.VarChar(19)
  Value     String? @db.Text
  Signature String? @db.Text
  timestamp String? @db.Text
}

model tradelog {
  id        BigInt @id @default(autoincrement())
  player1   String @db.VarChar(16)
  player2   String @db.VarChar(16)
  message   String @db.Text
  timestamp BigInt

  @@index([player1], map: "player1")
  @@index([player2], map: "player2")
  @@index([timestamp], map: "timestamp")
}
